class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None
        self.prev = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    # 탐색 (처음부터 끝까지 돌면서 key값으로 매칭하여 return)
    def find_node_with_key(self, key):
        iterator = self.head
        while iterator is not None:
            if iterator.key == key:
                return iterator
            iterator = iterator.next
        return None  # 해당 데이터가 없으면 None

        # 추가

    def append(self, key, value):
        new_node = Node(key, value)

        # 비어있을때
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node

        # 삭제

    def delete(self, node_to_delete):
        # 마지막 1개 노드가 남았을때
        if node_to_delete is self.tail and node_to_delete is self.head:
            self.head = None
            self.tail = None
        # 지울 노드가 head일때
        elif node_to_delete is self.head:
            self.head = self.head.next
            self.head.prev = None
        # 지울 노드가 tail일떄
        elif node_to_delete is self.tail:
            self.tail = self.tail.prev
            self.tail.next = None
        # tail, head가 아닌 중간 노드 삭제시
        else:
            node_to_delete.next.prev = node_to_delete.prev
            node_to_delete.prev.next = node_to_delete.next

    def __str__(self):
        res_str = ""
        iterator = self.head

        while iterator is not None:
            res_str += '{}: "{}"\n'.format(iterator.key, iterator.value)
            iterator = iterator.next
        return res_str
